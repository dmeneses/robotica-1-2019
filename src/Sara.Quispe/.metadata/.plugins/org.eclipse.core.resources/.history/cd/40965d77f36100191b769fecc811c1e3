import lejos.hardware.Sound;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.port.MotorPort;
import lejos.hardware.port.SensorPort;
import lejos.hardware.sensor.EV3ColorSensor;
import lejos.hardware.sensor.EV3UltrasonicSensor;
import lejos.robotics.SampleProvider;

public class Carro {
	EV3ColorSensor sensorColor = new EV3ColorSensor(SensorPort.S1);
	EV3UltrasonicSensor ultrasonic = new EV3UltrasonicSensor(SensorPort.S2);
	EV3LargeRegulatedMotor motorB = new EV3LargeRegulatedMotor(MotorPort.B);
	EV3LargeRegulatedMotor motorD = new EV3LargeRegulatedMotor(MotorPort.D);

	double diametroRueda = 5.5;

	public float detectarColor() {

		SampleProvider muestrasCapturadasColor = sensorColor.getColorIDMode();
		float[] datosDelSensor = new float[muestrasCapturadasColor.sampleSize()];
		muestrasCapturadasColor.fetchSample(datosDelSensor, 0);
		float color = datosDelSensor[0];
		System.out.println("color=" + color);
		return color;
	}

	public void avanzar(double distanciaFijaRecorrido) {

		int grados = 0;
		double circunferencia1 = Math.PI * diametroRueda;
		double numeroDeRotaciones = distanciaFijaRecorrido / circunferencia1;
		grados = (int) (numeroDeRotaciones * 360);

		int velocidad = 200;
		motorB.setSpeed(velocidad);
		motorB.rotate(grados, true);
		motorD.setSpeed(velocidad);
		motorD.rotate(grados);
		motorD.rotate(150);
		 
	}

	public void girar(int gradoGiro) {

		 
	}

	public double detectarObstaculo() {

		double distanciaDetectada = 0; 
		SampleProvider muestrasCapturadas = ultrasonic.getDistanceMode();
		float distanciaAlObstaculo = Float.POSITIVE_INFINITY;
		while (distanciaAlObstaculo == Float.POSITIVE_INFINITY) {
			float[] datosOjitos = new float[muestrasCapturadas.sampleSize()];
			muestrasCapturadas.fetchSample(datosOjitos, 0);
			System.out.println("dato enviado por sensor ="+ distanciaAlObstaculo);

			//distanciaAlObstaculo = datosOjitos[0];
			distanciaAlObstaculo= 0;
			
			int grados=0;
			double circunferencia=Math.PI* diametroRueda;
			double numeroDeRotaciones=distanciaAlObstaculo/circunferencia;
			grados=(int)(numeroDeRotaciones* 360);
			
			int velocidad=200;
			motorB.setSpeed(velocidad);
			motorB.rotate(grados,true);
			motorD.setSpeed(velocidad);
			motorD.rotate(grados);
	 
		}
		//double distanciaDetectada = 0;
		return distanciaDetectada;
		
	}
}